events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    upstream frontend {
        server frontend:3000;
    }

    upstream backend {
        server app:5000;
    }

    server {
        listen 80;
        server_name localhost;

        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }


        location /components/ {
            alias /app/frontend/src/components/;
            autoindex on;
            types {
                text/css    .css;
                text/javascript  .js;
            }
        }
    }
}

# Explication  ================================================================================================
# =============================================================================================================

# bloc "events" : Ce bloc configure les paramètres globaux liés aux événements.

# Directive "worker_connections 1024;" :
# Cette directive définit le nombre maximum de connexions simultanées que chaque processus de travail (worker) peut gérer. Ici, chaque worker peut gérer jusqu'à 1024 connexions simultanées.

# ***************************************************** 
# http : Ce bloc configure les paramètres globaux liés au protocole HTTP. !!!!!!!!!!!!!!!!!!

# Bloc "upstream frontend" :

# Directive "server frontend:3000;" :
# cette directive définit un groupe de serveurs backend pour le frontend. Dans ce cas, il y a un seul serveur frontend
# qui écoute sur le port 3000.

# Bloc "upstream backend" :
# Ce bloc définit un groupe de serveurs backend pour le backend.

# Directive "server app:5000;" :
# Cette directive définit un seul serveur backend pour le backend, qui écoute sur le port 5000.

# Directive "server" :
# Cette directive définit un bloc de serveur qui contient les configurations pour un serveur virtuel.

# directive "server_name localhost;"" :
# Cette directive spécifie le nom d'hôte pour ce serveur virtuel. Ici, il est configuré pour répondre aux requêtes destinées à localhost.

# Directive "listen 80" :
# Cette directive indique à Nginx d'écouter les requêtes HTTP sur le port 80.

# ***************************************************** 

# Bloc "location /"" :
# Ce bloc configure le comportement de Nginx pour les requêtes dont === l'URI commence par /. ===

# "proxy_pass http://app-frontend:3000;"" :
# Cette directive indique à Nginx de transmettre (proxy) les requêtes reçues à l'adresse http://app-frontend:3000.
# app-frontend est le nom du conteneur Docker pour le frontend, et 3000 est le port sur lequel le frontend écoute.

# "proxy_set_header Host $host;"" :
# Cette directive définit l'en-tête Host de la requête proxy avec la valeur de la variable $host, qui représente le nom d'hôte
# de la requête d'origine.

# "proxy_set_header X-Real-IP $remote_addr;"" :
# Cette directive ajoute un en-tête X-Real-IP à la requête proxy avec l'adresse IP du client d'origine.
# ( VOIR ANNEXE ==== A ===== (plus bas) POUR PLUS DE DETAILS SUR LES EN-TETES )

# "proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;" :
# Cette directive ajoute un en-tête X-Forwarded-For à la requête proxy avec la chaîne d'adresses IP des clients successifs.
# ( VOIR ANNEXE ==== A ===== (plus bas) POUR PLUS DE DETAILS SUR LES EN-TETES )

# "proxy_set_header X-Forwarded-Proto $scheme;" :
# Cette directive ajoute un en-tête X-Forwarded-Proto à la requête proxy avec le schéma de la requête d'origine (HTTP ou HTTPS).
# ( VOIR ANNEXE ==== A ===== (plus bas) POUR PLUS DE DETAILS SUR LES EN-TETES )

# ***************************************************** 

# Bloc "location /api/" :
# Ce bloc configure le comportement de Nginx pour les requêtes dont ===  l'URI commence par /api/. ====

# "proxy_pass http://app-backend:5000;" :
# Cette directive indique à Nginx de transmettre (proxy) les requêtes reçues à l'adresse http://app-backend:5000.

# app-backend est le nom du conteneur Docker pour le backend, et 5000 est le port sur lequel le backend écoute.
# Les directives proxy_set_header dans ce bloc sont les mêmes que celles du bloc précédent et servent les mêmes objectifs.

# Résumé
# Port 80 : Nginx écoute les requêtes HTTP sur le port 80.
# Requêtes vers / : Les requêtes dont l'URI commence par / sont transmises au conteneur app-frontend sur le port 3000.
# Requêtes vers /api/ : Les requêtes dont l'URI commence par /api/ sont transmises au conteneur app-backend sur le port 5000.
# En-têtes Proxy : Nginx ajoute des en-têtes à la requête proxy pour inclure des informations sur l'hôte d'origine,
# l'adresse IP du client, et le schéma de la requête.
# Cette configuration permet à Nginx de servir les fichiers statiques du frontend et de transmettre les requêtes API
# au backend, tout en conservant les informations sur l'hôte et le client d'origine.


# ANNEXE A : EN-TETES HTTP================================================================================================
# ========================================================================================================================
#                                               proxy_set_header X-Real-IP
# ========================================================================================================================

# La directive `proxy_set_header X-Real-IP $remote_addr;` dans la configuration Nginx est utilisée pour ajouter un en-tête
# HTTP `X-Real-IP` à la requête proxy. Cet en-tête contient l'adresse IP du client d'origine qui a fait la requête initiale.
# Voici pourquoi et comment cela fonctionne :

# ### Pourquoi Utiliser `X-Real-IP`

# 1. **Conservation de l'Adresse IP du Client d'Origine** :
#    - Lorsque Nginx agit comme un reverse proxy, il reçoit les requêtes des clients et les transmet aux serveurs backend
# (comme votre application backend).
#    - Par défaut, le serveur backend ne voit que l'adresse IP de Nginx (le proxy) comme adresse IP source de la requête.
#    - Pour que le serveur backend connaisse l'adresse IP réelle du client d'origine, Nginx ajoute l'en-tête `X-Real-IP`
# avec l'adresse IP du client.

# 2. **Journalisation et Sécurité** :
#    - Connaître l'adresse IP réelle du client est important pour la journalisation, l'analyse des logs, et les mesures
# de sécurité.
#    - Les applications backend peuvent utiliser cette information pour des fonctionnalités comme la limitation de débit
# (rate limiting), la détection de fraude, et la personnalisation basée sur l'emplacement géographique.

# ### Comment Cela Fonctionne

# - **Directive `proxy_set_header`** :
#   - La directive `proxy_set_header` permet de définir ou de modifier les en-têtes HTTP envoyés avec la requête proxy.
#   - `proxy_set_header X-Real-IP $remote_addr;` ajoute un en-tête `X-Real-IP` avec la valeur de la variable `$remote_addr`.

# - **Variable `$remote_addr`** :
#   - La variable `$remote_addr` contient l'adresse IP du client qui a fait la requête initiale à Nginx.
#   - Lorsque Nginx reçoit une requête, il stocke l'adresse IP du client dans cette variable.

# ========================================================================================================================
#                                          proxy_set_header X-Forwarded-For
# ========================================================================================================================

# Chaque proxy intermédiaire dans la chaîne ajoute son adresse IP à l'en-tête `X-Forwarded-For` avant de transmettre la
# requête au prochain proxy ou au serveur final.
# Nginx, en tant que dernier proxy dans la chaîne, reçoit cet en-tête avec toutes les adresses IP des proxies intermédiaires,
# y compris l'adresse IP d'origine du client.

# ### Fonctionnement de `X-Forwarded-For`

# 1. **Client d'origine** : `192.168.1.1`
# 2. **Proxy 1** : `192.168.1.2`
# 3. **Proxy 2** : `192.168.1.3`
# 4. **...**
# 5. **Proxy N** : `192.168.1.N`
# 6. **Nginx** : `192.168.1.N+1`

# ### Illustration des En-têtes

# #### Avant d'atteindre Nginx

# - **Client d'origine (192.168.1.1)** :
#   ```
#   (Pas d'en-têtes spécifiques)
#   ```

# - **Proxy 1 (192.168.1.2)** :
#   ```
#   X-Forwarded-For: 192.168.1.1 ( ajouté a la fin de la chaine par le proxy 1 )
#   ```

# - **Proxy 2 (192.168.1.3)** :
#   ```
#   X-Forwarded-For: 192.168.1.1, 192.168.1.2 ( ajouté a la fin de la chaine par le proxy 2 )
#   ```

# - **...**

# - **Proxy N (192.168.1.N)** :
#   ```
#   X-Forwarded-For: 192.168.1.1, 192.168.1.2, ..., 192.168.1.N-1
#   ```

# #### Après avoir atteint Nginx

# - **Nginx (192.168.1.N+1)** :
#   ```
#   X-Forwarded-For: 192.168.1.1, 192.168.1.2, ..., 192.168.1.N
#   X-Real-IP: 192.168.1.1
#   ```
# ========================================================================================================================
# ATTENTION !!!!!!
#========================================================================================================================
# En théorie, il est possible de masquer l'adresse IP d'origine en utilisant une chaîne de proxies, mais cela dépend de
# la configuration et du comportement des proxies intermédiaires. Voici quelques points à considérer :

# Masquage de l'IP d'Origine avec une Chaîne de Proxies
# Proxies de Confiance :

# Si tous les proxies intermédiaires sont configurés pour ajouter l'adresse IP du client précédent à l'en-tête X-Forwarded-For,
# l'adresse IP d'origine peut être tracée à travers la chaîne de proxies.
# Cependant, si un proxy intermédiaire est configuré pour ne pas ajouter ou pour supprimer/modifier l'en-tête X-Forwarded-For,
# l'adresse IP d'origine peut être masquée.
# Proxies Anonymes :

# Certains proxies anonymes ou VPNs sont conçus pour masquer l'adresse IP d'origine en ne transmettant pas l'en-tête
# X-Forwarded-For ou en le remplaçant par une adresse IP générique.
# Dans ce cas, le serveur backend ne pourra pas voir l'adresse IP d'origine du client.
# Proxies Malveillants :

# Un proxy malveillant peut intentionnellement modifier ou supprimer l'en-tête X-Forwarded-For pour masquer l'adresse IP
# d'origine.
# Dans ce cas, le serveur backend ne pourra pas voir l'adresse IP d'origine du client.$

#========================================================================================================================
#                                           proxy_set_header X-Forwarded-Proto
# ========================================================================================================================
# La directive proxy_set_header X-Forwarded-Proto $scheme; dans la configuration Nginx est utilisée pour ajouter
# un en-tête HTTP X-Forwarded-Proto à la requête proxy. Cet en-tête contient le schéma de la requête d'origine,
# c'est-à-dire si la requête a été faite en utilisant HTTP ou HTTPS.

# Pourquoi Utiliser X-Forwarded-Proto
# Conservation du Schéma de la Requête d'Origine :

# Lorsque Nginx agit comme un reverse proxy, il reçoit les requêtes des clients et les transmet aux serveurs backend.
# Le serveur backend peut avoir besoin de savoir si la requête d'origine a été faite en utilisant HTTP ou HTTPS pour
# diverses raisons, telles que la génération de liens absolus, la redirection, ou l'application de politiques de sécurité.
# Génération de Liens Absolus :

# Si le serveur backend génère des liens absolus (par exemple, dans les réponses HTML ou les redirections),
# il doit savoir si la requête d'origine était en HTTP ou HTTPS pour générer les liens corrects.
# Sécurité et Redirections :

# Le serveur backend peut utiliser l'en-tête X-Forwarded-Proto pour appliquer des politiques de sécurité spécifiques aux
# requêtes HTTPS.
# Il peut également utiliser cet en-tête pour rediriger les requêtes HTTP vers HTTPS.
# Comment Cela Fonctionne
# Directive proxy_set_header :

# La directive proxy_set_header permet de définir ou de modifier les en-têtes HTTP envoyés avec la requête proxy.
# proxy_set_header X-Forwarded-Proto $scheme; ajoute un en-tête X-Forwarded-Proto avec la valeur de la variable $scheme.
# Variable $scheme :

# La variable $scheme contient le schéma de la requête d'origine, soit http soit https.
# Lorsque Nginx reçoit une requête, il détermine le schéma utilisé pour cette requête et stocke cette information dans
# la variable $scheme.